#!/usr/bin/env python

# Copyright (c) 2011, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#    * Neither the name of the Willow Garage, Inc. nor the names of its
#      contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import rospy
from geometry_msgs.msg import Twist
from sensor_msgs.msg import LaserScan
from std_msgs.msg import Float64 as joint_command
import sys, select, os
if os.name == 'nt':
  import msvcrt
else:
  import tty, termios

BURGER_MAX_LIN_VEL = 0.22
BURGER_MAX_ANG_VEL = 2.84

WAFFLE_MAX_LIN_VEL = 0.26
WAFFLE_MAX_ANG_VEL = 1.82

LIN_VEL_STEP_SIZE = 0.01
ANG_VEL_STEP_SIZE = 0.1

msg = """
Control Your TurtleBot3!
---------------------------
Moving around:
        w
   a    s    d
        x

w/x : increase/decrease linear velocity (Burger : ~ 0.22, Waffle and Waffle Pi : ~ 0.26)
a/d : increase/decrease angular velocity (Burger : ~ 2.84, Waffle and Waffle Pi : ~ 1.82)

space key, s : force stop

CTRL-C to quit
"""

e = """
Communications Failed
"""

def getKey():
    if os.name == 'nt':
      return msvcrt.getch()

    tty.setraw(sys.stdin.fileno())
    rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
    if rlist:
        key = sys.stdin.read(1)
    else:
        key = ''

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    return key

def vels(target_linear_vel, target_angular_vel):
    return "currently:\tlinear vel %s\t angular vel %s " % (target_linear_vel,target_angular_vel)

def makeSimpleProfile(output, input, slop):
    if input > output:
        output = min( input, output + slop )
    elif input < output:
        output = max( input, output - slop )
    else:
        output = input

    return output

def constrain(input, low, high):
    if input < low:
      input = low
    elif input > high:
      input = high
    else:
      input = input

    return input

def checkLinearLimitVelocity(vel):
    if turtlebot3_model == "burger":
      vel = constrain(vel, -BURGER_MAX_LIN_VEL, BURGER_MAX_LIN_VEL)
    elif turtlebot3_model == "waffle" or turtlebot3_model == "waffle_pi":
      vel = constrain(vel, -WAFFLE_MAX_LIN_VEL, WAFFLE_MAX_LIN_VEL)
    else:
      vel = constrain(vel, -BURGER_MAX_LIN_VEL, BURGER_MAX_LIN_VEL)

    return vel

def checkAngularLimitVelocity(vel):
    if turtlebot3_model == "burger":
      vel = constrain(vel, -BURGER_MAX_ANG_VEL, BURGER_MAX_ANG_VEL)
    elif turtlebot3_model == "waffle" or turtlebot3_model == "waffle_pi":
      vel = constrain(vel, -WAFFLE_MAX_ANG_VEL, WAFFLE_MAX_ANG_VEL)
    else:
      vel = constrain(vel, -BURGER_MAX_ANG_VEL, BURGER_MAX_ANG_VEL)

    return vel

def lidarFilter(ranges):
    return [x for x in ranges if x > 0.22]

class Controller():
    def __init__(self):
        self.__lidarData = None

    def updateLidar(self, data):
        self.__lidarData = data

    def getObjectPos(self):
        if(self.__lidarData == None):
            return [(float("inf"), 0)]
        ranges = self.__lidarData.ranges
        ranges = lidarFilter(ranges)
        angle_min = self.__lidarData.angle_min
        angle_max = self.__lidarData.angle_max
        angle_increment = self.__lidarData.angle_increment
        pos_r_theta = []

        previous_distance = ranges[-1]
        distance_decreasing = None
        for i, distance in enumerate(ranges):
            if distance > previous_distance:
                if distance_decreasing:
                    pos_r_theta.append((distance, angle_min+i*angle_increment))
                distance_decreasing = False
            else:
                distance_decreasing = True
            previous_distance = distance
        print(min([x[0] for x in pos_r_theta] + [float("inf")]))
        return pos_r_theta

controller = None

def callbackScan(data):
    controller.updateLidar(data)

if __name__=="__main__":
    if os.name != 'nt':
        settings = termios.tcgetattr(sys.stdin)

    rospy.init_node('robot_control')
    pub_left_wheel = rospy.Publisher('turtlebot3_waffle_sim/left_wheel_velocity_controller/command', joint_command, queue_size=10)
    pub_right_wheel = rospy.Publisher('turtlebot3_waffle_sim/right_wheel_velocity_controller/command', joint_command, queue_size=10)
    pub_actuator = rospy.Publisher('turtlebot3_waffle_sim/joint1_position_controller/command', joint_command, queue_size=10)

    turtlebot3_model = rospy.get_param("model", "burger")

    rospy.Subscriber("/scan", LaserScan, callbackScan)

    controller = Controller()

    status = 0
    target_linear_vel   = 0.0
    target_angular_vel  = 0.0
    control_linear_vel  = 0.0
    control_angular_vel = 0.0
    target_angle = 0.0
    try:
        print(msg)
        while(1):
            key = getKey()
            if key == 'w' :
                target_linear_vel = checkLinearLimitVelocity(target_linear_vel + LIN_VEL_STEP_SIZE)
                status = status + 1
                print(vels(target_linear_vel,target_angular_vel))
            elif key == 'x' :
                target_linear_vel = checkLinearLimitVelocity(target_linear_vel - LIN_VEL_STEP_SIZE)
                status = status + 1
                print(vels(target_linear_vel,target_angular_vel))
            elif key == 'a' :
                target_angular_vel = checkAngularLimitVelocity(target_angular_vel + ANG_VEL_STEP_SIZE)
                status = status + 1
                print(vels(target_linear_vel,target_angular_vel))
            elif key == 'd' :
                target_angular_vel = checkAngularLimitVelocity(target_angular_vel - ANG_VEL_STEP_SIZE)
                status = status + 1
                print(vels(target_linear_vel,target_angular_vel))
            elif key == 's' :
                target_linear_vel   = 0.0
                control_linear_vel  = 0.0
                target_angular_vel  = 0.0
                control_angular_vel = 0.0
                print(vels(target_linear_vel, target_angular_vel))
            elif key == 'q' :
                target_angle   = -1.57
                print("kick!")
            elif key == 'e' :
                target_angle   = 0
                print("return!")
            else:
                if (key == '\x03'):
                    break
            objectPos = controller.getObjectPos()
            closest_object = None
            if len(objectPos) > 0:
                closest_object = min(objectPos + [(float("inf"), 0)], key=(lambda x: x[0]))
            if closest_object != None and closest_object[0] < 0.3 and (closest_object[1] < 3.14*45/180 or closest_object[1] > 3.14*315/180):
                target_linear_vel   = 0.0 if target_linear_vel > 0 else target_linear_vel
                control_linear_vel  = 0.0 if control_linear_vel > 0 else control_linear_vel
                print("Stop in front of an obstacle", vels(target_linear_vel, target_angular_vel))

            if status == 20 :
                print(msg)
                status = 0
            command_left_wheel = joint_command()
            command_right_wheel = joint_command()
            command_actuator = joint_command()
            


            command_left_wheel.data = 50.0*target_linear_vel - 10.0*target_angular_vel
            command_right_wheel.data = 50.0*target_linear_vel + 10.0*target_angular_vel
            command_actuator.data = target_angle
            pub_left_wheel.publish(command_left_wheel)
            pub_right_wheel.publish(command_right_wheel)
            pub_actuator.publish(command_actuator)
    except Exception as ex:
        print(e, ex)

    finally:
            command_left_wheel = joint_command()
            command_right_wheel = joint_command()
            command_actuator = joint_command()
            


            command_left_wheel.data = 0.0
            command_right_wheel.data = 0.0
            pub_left_wheel.publish(command_left_wheel)
            pub_right_wheel.publish(command_right_wheel)
            pub_actuator.publish(command_actuator)
    if os.name != 'nt':
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
